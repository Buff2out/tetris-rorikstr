{
  description = "C Project with Check, Valgrind, Gcov support";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system: let
      pkgs = nixpkgs.legacyPackages.${system};

      buildInputs = with pkgs; [
        check         # –¥–ª—è unit-—Ç–µ—Å—Ç–æ–≤
        valgrind      # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç–µ—á–µ–∫
        lcov          # –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ gcov
        clang-tools   # clang-format
        gcc           # –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä
        gnumake       # make
        ncurses       # –¥–ª—è TUI/CLI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        readline      # –¥–ª—è readline –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        zlib          # —Å–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö
        libxml2       # XML parsing
        curl          # HTTP –∫–ª–∏–µ–Ω—Ç
        openssl       # –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è
        sqlite        # –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
      ];
    in {
      devShells.default = pkgs.mkShell {
        inherit buildInputs;

        shellHook = ''
          echo "‚úÖ C Project Dev Environment Loaded"
          echo "üîß Available tools:"
          echo "   - gcc, make, clang-format"
          echo "   - checkmk, valgrind, lcov"
          echo "üöÄ Run 'make test' to build and run tests"
        '';
      };
    });
}
